// Generated by CoffeeScript 1.6.2
(function() {
  var Matrix, matrix;

  Matrix = (function() {
    function Matrix(rows, cols) {
      var i;

      this.rows = Number(rows) > 0 ? Number(rows) : 0;
      this.cols = Number(cols) > 0 ? Number(cols) : 0;
      this.grids = (function() {
        var _i, _ref, _results;

        _results = [];
        for (i = _i = 0, _ref = rows * cols; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
    }

    Matrix.prototype.print = function() {
      var col, result, row, _i, _j, _ref, _ref1;

      result = "";
      for (row = _i = 0, _ref = this.rows; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
        for (col = _j = 0, _ref1 = this.cols; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          result += "" + (this.getValue(row, col)) + " ";
        }
        result += "\n";
      }
      return console.log(result);
    };

    Matrix.prototype.isValidIndex = function(row, col) {
      return ((0 <= row && row < this.rows)) && ((0 <= col && col < this.cols));
    };

    Matrix.prototype.convertIndex = function(row, col) {
      if (this.isValidIndex(row, col)) {
        return row * this.cols + col;
      } else {
        return 0;
      }
    };

    Matrix.prototype.getValue = function(row, col) {
      if (this.isValidIndex(row, col)) {
        return this.grids[this.convertIndex(row, col)];
      } else {
        return Matrix.InvalidValue;
      }
    };

    Matrix.prototype.setValue = function(value, row, col) {
      if (this.isValidIndex(row, col)) {
        return this.grids[this.convertIndex(row, col)] = value;
      }
    };

    Matrix.prototype.growAtIndex = function(row, col) {
      var aroundIndex, growIndexes, index, newGrowIndexes, step, _i, _j, _k, _len, _len1, _ref, _ref1;

      if (this.isValidIndex(row, col)) {
        growIndexes = [
          {
            row: row,
            col: col
          }
        ];
        for (step = _i = 1, _ref = this.rows + this.cols; 1 <= _ref ? _i < _ref : _i > _ref; step = 1 <= _ref ? ++_i : --_i) {
          if (!(growIndexes.length > 0)) {
            continue;
          }
          newGrowIndexes = [];
          for (_j = 0, _len = growIndexes.length; _j < _len; _j++) {
            index = growIndexes[_j];
            this.setValue(step, index.row, index.col);
            _ref1 = this.getAroundIndexes(index.row, index.col);
            for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
              aroundIndex = _ref1[_k];
              if (this.getValue(index.row, index.col) === 0) {
                newGrowIndexes.push(aroundIndex);
              }
            }
          }
          growIndexes = newGrowIndexes;
        }
      }
      return console.log("grow done!");
    };

    Matrix.prototype.getAroundIndexes = function(row, col) {
      var aroundIndex, indexOffset, indexes, _i, _len, _ref;

      indexes = [];
      _ref = [
        {
          row: -1,
          col: 0
        }, {
          row: 1,
          col: 0
        }, {
          row: 0,
          col: -1
        }, {
          row: 0,
          col: 1
        }
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        indexOffset = _ref[_i];
        aroundIndex = {
          row: row + indexOffset.row,
          col: col + indexOffset.col
        };
        if (this.isValidIndex(aroundIndex.row, aroundIndex.col)) {
          indexes.push(aroundIndex);
        }
      }
      return indexes;
    };

    return Matrix;

  })();

  Matrix.InvalidValue = -1;

  matrix = new Matrix(4, 5);

  matrix.growAtIndex(1, 1);

  matrix.print();

  console.log(matrix.getAroundIndexes(0, 0));

}).call(this);
